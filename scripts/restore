#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

# Keep this path for calling _common.sh inside the execution's context of backup and restore scripts
source ../settings/scripts/_common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

install_dir=$(ynh_app_setting_get --app=$app --key=install_dir)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
server_name=$(ynh_app_setting_get --app=$app --key=server_name)
botname=$(ynh_app_setting_get --app=$app --key=botname)
homeserver_instance=$(ynh_app_setting_get --app=$app --key=homeserver_instance)
homeserver_type=$(ynh_app_setting_get --app=$app --key=homeserver_type)
bot_is_homeserver_admin=$(ynh_app_setting_get --app=$app --key=bot_is_homeserver_admin)
encryption=$(ynh_app_setting_get --app=$app --key=encryption)
botusers=$(ynh_app_setting_get --app=$app --key=botusers)
botadmin=$(ynh_app_setting_get --app=$app --key=botadmin)
previous_mautrix_version=$(ynh_app_setting_get --app=$app --key=mautrix_version)
port=$(ynh_app_setting_get --app=$app --key=port)
mautrix_version=$(ynh_app_upstream_version)
# TODO add admin support
# synapse_db_name="matrix_$synapse_instance"
# bot_synapse_db_user="@$botname:$server_name"
signald_data="/var/lib/signald"
#signald_exe="/usr/bin/signald"
signald_user="signald" # This is actually chosen by the signald dependency


if [ $homeserver_type -eq "synapse" ]
homeserver_install_dir=$(ynh_app_setting_get --app $homeserver_instance --key final_path)
elif [ $homeserver_type -eq "dendrite" ]
homeserver_install_dir=$(ynh_app_setting_get --app $homeserver_instance --key install_dir)
fi

if [ $homeserver_type -eq "synapse" ]
app_service_dir="$homeserver_install_dir/app-service"
elif [ $homeserver_type -eq "dendrite" ]
app_service_dir="/etc/matrix-$homeserver_instance/app-service"
fi

#=================================================
# CHECK IF THE APP CAN BE RESTORED
#=================================================
ynh_script_progression --message="Validating restoration parameters..." --weight=1

test ! -d $install_dir \
	|| ynh_die --message="There is already a directory: $install_dir "

#=================================================
# STANDARD RESTORATION STEPS
#=================================================
# RECREATE THE DEDICATED USER
#=================================================
ynh_script_progression --message="Recreating the dedicated system user..." --weight=1

# Create the dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$install_dir"

#=================================================
# RESTORE THE APP MAIN DIR
#=================================================
ynh_script_progression --message="Restoring the app main directory..." --weight=1

ynh_restore_file --origin_path="$install_dir"

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

#=================================================
# SPECIFIC RESTORATION
#=================================================
# REINSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Reinstalling dependencies..." --weight=1

# Define and install dependencies
ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies
ynh_exec_warn_less ynh_install_extra_app_dependencies --repo="https://updates.signald.org unstable main" --package="$extra_dependencies" --key="https://updates.signald.org/apt-signing-key.asc"

#=================================================
# RECREATE THE DEDICATED USER
#=================================================
ynh_script_progression --message="Recreating the dedicated system user..." --weight=1

# Create the dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$install_dir" --groups="$signald_user"

#=================================================
# RESTORE THE POSTGRESQL DATABASE
#=================================================
ynh_script_progression --message="Restoring the PostgreSQL database..." --weight=8

ynh_psql_test_if_first_run
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
ynh_psql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$db_pwd
ynh_psql_execute_file_as_root --file="./db.sql" --database=$db_name

#=================================================
# INSTALL MAUTRIX-BRIDGE PYTHON MODULE
#=================================================
ynh_script_progression --message="Installing Mautrix-Bridge Python Module..." --weight=6

mkdir -p /var/log/$app
# Configure Mautrix-Bridge
python3 -m venv $install_dir
export HOME=$install_dir
$install_dir/bin/pip3 install --upgrade pip setuptools wheel

#=================================================
# REGISTER DENDRITE APP-SERVICE
#=================================================
ynh_script_progression --message="Registering $homeserver_instance app-service" --weight=1

$install_dir/bin/python3 -m mautrix_signal -g -c $install_dir/config.yaml -r $app_service_dir/$app.yaml

$homeserver_install_dir/update_synapse_for_appservice.sh || ynh_die "$homeserver_instance cannot restart with the app-service configuration"

#=================================================
# RESTORE VARIOUS FILES
#=================================================

ynh_systemd_action --service_name=signald --action="stop"
ynh_restore_file --origin_path="$signald_data"
ynh_systemd_action --service_name=signald --action="start"

#=================================================
# RESTORE SYSTEMD
#=================================================
ynh_script_progression --message="Restoring the systemd configuration..." --weight=1

ynh_restore_file --origin_path="/etc/systemd/system/$app.service"
systemctl enable $app.service --quiet

#=================================================
# RESTORE THE LOGROTATE CONFIGURATION
#=================================================
ynh_script_progression --message="Restoring the logrotate configuration..." --weight=1

ynh_restore_file --origin_path="/etc/logrotate.d/$app"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="$app daemon for bridging Signal and Matrix messages ($homeserver_instance)" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"
# Wait until the dendrite user is created
sleep 30
# TODO admin support
   # (Note that, by default, non-admins might not have your homeserver's permission to create communities.)
   # if [ "$bot_is_homeserver_admin" = true ]
   # then
   #  ynh_psql_execute_as_root --database=$synapse_db_name --sql="UPDATE users SET admin = 1 WHERE name = ""$botname"";"
#    #yunohost app action run $synapse_instance set_admin_user -a username=$botname
   # fi
ynh_systemd_action --service_name=$app --action="restart"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Restoration completed for $app" --last
