#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

synapsenumber=$YNH_APP_ARG_SYNAPSENUMBER

app=$YNH_APP_INSTANCE_NAME
#signald_name="signald"
#signald_path=/opt/yunohost/signald_name

# ToDo check (in manifest?) if the selected synapse instance is not already connected to a mautrix_bridge bridge
if [ $synapsenumber -eq "1" ]
then
synapse_instance="synapse"
else
synapse_instance="synapse__$synapsenumber"
fi
server_name=$(ynh_app_setting_get --app $synapse_instance --key server_name)
domain=$(ynh_app_setting_get --app $synapse_instance --key domain)
synapse_config_path="/etc/matrix-$synapse_instance"
synapse_name="matrix-$synapse_instance"
synapse_user="matrix-$synapse_instance"
synapse_db_name="matrix_$synapse_instance"
synapse_db_user="matrix_$synapse_instance"

botname=$YNH_APP_ARG_BOTNAME
encryption=$YNH_APP_ARG_ENCRYPTION
botadmin=$YNH_APP_ARG_BOTADMIN
if [ "$YNH_APP_ARG_BOTUSERS" = "local" ]
then
botusers=$server_name
elif [ "$YNH_APP_ARG_BOTUSERS" = "admin" ]
then
botusers=$botadmin
else
botusers=$YNH_APP_ARG_BOTUSERS
fi
#=================================================
# SET CONSTANTS
#=================================================

upstream_version=$(ynh_app_upstream_version)
signald_user=signald # This is actually chosen by the signald dependency

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --weight=1

# Find a free port for communication between your local synapse instance (home server) and its app service mautrix_bridge.
port=$(ynh_find_port --port=8449)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=7

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=server_name --value=$server_name
ynh_app_setting_set --app=$app --key=botname --value=$botname
ynh_app_setting_set --app=$app --key=synapse_instance --value=$synapse_instance
ynh_app_setting_set --app=$app --key=encryption --value=$encryption
ynh_app_setting_set --app=$app --key=botadmin --value=$botadmin
ynh_app_setting_set --app=$app --key=botusers --value=$botusers
ynh_app_setting_set --app=$app --key=mautrix_version --value=$upstream_version
ynh_app_setting_set --app=$app --key=final_path --value=$final_path

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=97

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies

ynh_install_extra_app_dependencies --repo="https://updates.signald.org unstable main" --package="$extra_dependencies" --key="https://updates.signald.org/apt-signing-key.asc"

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression --message="Creating a PostgreSQL database..." --weight=3

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_psql_test_if_first_run
ynh_psql_setup_db --db_user=$db_name --db_name=$db_name

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
# Add the user to the signald group. The signald group was created when the signald
# package was installed from the extra repository
ynh_system_user_create --username=$app --groups="$signald_user"
#ynh_system_user_create --username=$signald_user

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=3

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path/src"
#ynh_setup_source --dest_dir=$signald_path --source_id=$signald_name

# Create folders and set permissions, otherwise signald creates them without rw for group
# Unfortunately subfolders are dynamically created for stickers, so those won't work for now.
mkdir -p /var/lib/signald/{avatars,attachments,stickers}
chown $signald_user:$app /var/lib/signald/{avatars,attachments,stickers}
chmod g+rwX /var/lib/signald/{avatars,attachments,stickers}

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=20

# Create systemd config for Mautrix-Bridge
ynh_add_systemd_config # --service=$app
#ynh_add_systemd_config --service="$signald_name" --template="signald.service"

#=================================================

#=================================================
# SET MAUTRIX-BRIDGE CONFIG
#=================================================
ynh_script_progression --message="Configuring Mautrix-Bridge..." --weight=2

# WARNING : theses command are used in INSTALL, UPGRADE, CONFIG, CHANGE-URL (4 times)
# For any update do it in all files

# https://docs.python.org/3.6/library/logging.html#logging-levels
log_level="INFO"

ynh_add_config --template="../conf/config.yaml" --destination="$final_path/config.yaml"

#=================================================
# INSTALL SIGNALD
#=================================================
#cd $signald_path
#make installDist
#make setup

#=================================================
# INSTALL MAUTRIX-BRIDGE PYTHON MODULE
#=================================================

mkdir -p /var/log/$app
# Configure Mautrix-Bridge
python3 -m venv $final_path
$final_path/bin/pip3 install --upgrade pip setuptools wheel
$final_path/bin/pip3 install $final_path/src/mautrix-signal.tar.gz[metrics,formattednumbers,qrlink,stickers]
# -r optional-requirements.txt
$final_path/bin/python3 -m mautrix_signal -g -c $final_path/config.yaml -r /etc/matrix-$synapse_instance/app-service/$app.yaml

/opt/yunohost/matrix-$synapse_instance/update_synapse_for_appservice.sh \
    || ynh_die "Synapse can't restart with the appservice configuration"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="/etc/matrix-$synapse_instance/app-service/$app.yaml"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R root: $final_path
chown $app:root -R $final_path
#chown $signald_user:root -R $signald_path

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=3

# Use logrotate to manage application logfile(s)
ynh_use_logrotate
chown $app:root -R /var/log/$app

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="Bridging Signal and Matrix messages" --log="/var/log/$app/$app.log"
#yunohost service add $signald_name --description "$signald_name daemon for Signal messages" --log "$log_filename"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
#ynh_systemd_action --service_name=$signald_name --action="start"
#sleep 5
ynh_systemd_action --service_name=$app --action="start"
# Wait until the synapse user is created
sleep 30
#    # (Note that, by default, non-admins might not have your homeserver's permission to create communities.)
#    if [ "$bot_is_synapse_admin" = true ]
#    then
    ynh_psql_execute_as_root --database=$synapse_db_name --sql="UPDATE users SET admin = 1 WHERE name = ""$botname"";"
#    #yunohost app action run $synapse_instance set_admin_user -a username=$botname
#    fi
ynh_systemd_action --service_name=$app --action="restart"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
