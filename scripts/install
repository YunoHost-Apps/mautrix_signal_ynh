#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

homeserver_type=$YNH_APP_ARG_HOMESERVER_TYPE
homeserver_id=$YNH_APP_ARG_HOMESERVER_ID
botname=$YNH_APP_ARG_BOTNAME
bot_is_homeserver_admin=true
encryption=false
botadmin=$YNH_APP_ARG_BOTADMIN
botusers=$YNH_APP_ARG_BOTUSERS

app=$YNH_APP_INSTANCE_NAME

if [ "$botusers" == "admin" ]
then
	botusers=$botadmin
fi

# ToDo check (in manifest?) if the selected homeserver instance is not already connected to a mautrix_signal bridge
if [ $homeserver_id -eq "1" ]
then
	homeserver_instance=$homeserver_type
else
	homeserver_instance="$homeserver_type__$homeserver_id"
fi
server_name=$(ynh_app_setting_get --app $homeserver_instance --key server_name)
domain=$(ynh_app_setting_get --app $homeserver_instance --key domain)
if [ $homeserver_type -eq "synapse" ]
homeserver_install_dir=$(ynh_app_setting_get --app $homeserver_instance --key final_path)
elif [ $homeserver_type -eq "dendrite" ]
homeserver_install_dir=$(ynh_app_setting_get --app $homeserver_instance --key install_dir)
fi

mautrix_version=$(ynh_app_upstream_version)
enable_relaybot=true
# TODO add admin support
#bot_dendrite_db_user="@$botname:$server_name"
#dendrite_db_name="matrix_$synapse_instance"
signald_user="signald" # This is actually chosen by the signald dependency
if [ $homeserver_type -eq "synapse" ]
app_service_dir="$homeserver_install_dir/app-service"
elif [ $homeserver_type -eq "dendrite" ]
app_service_dir="/etc/matrix-$homeserver_instance/app-service"
fi

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

install_dir=/opt/yunohost/$app
test ! -e "$install_dir" || ynh_die --message="This path already contains a folder"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=7

ynh_app_setting_set --app=$app --key=botname --value=$botname
ynh_app_setting_set --app=$app --key=bot_is_homeserver_admin --value=$bot_is_homeserver_admin
ynh_app_setting_set --app=$app --key=encryption --value=$encryption
ynh_app_setting_set --app=$app --key=botadmin --value=$botadmin
ynh_app_setting_set --app=$app --key=botusers --value=$botusers
ynh_app_setting_set --app=$app --key=homeserver_instance --value=$homeserver_instance
ynh_app_setting_set --app=$app --key=homeserver_type --value=$homeserver_type
ynh_app_setting_set --app=$app --key=server_name --value=$server_name
ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=mautrix_version --value=$mautrix_version

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --weight=1

# Find a free port for communication between your local homeserver instance (home server) and its app service mautrix_bridge.
port=$(ynh_find_port --port=8449)
ynh_app_setting_set --app=$app --key=port --value=$port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=10

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies
ynh_install_extra_app_dependencies --repo="https://updates.signald.org unstable main" --package="$extra_dependencies" --key="https://updates.signald.org/apt-signing-key.asc"
sleep 3

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
# Add the user to the signald group. The signald group was created when the signald
# package was installed from the extra repository
# resolved by https://gitlab.com/signald/signald/-/commit/278240f3f1cc40a3b444c958b68ca3d6908e98a8
ynh_system_user_create --username=$app --home_dir="$install_dir" --groups="$signald_user"

#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression --message="Creating a PostgreSQL database..." --weight=3

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_psql_test_if_first_run
ynh_psql_setup_db --db_user=$db_user --db_name=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=3

ynh_app_setting_set --app=$app --key=install_dir --value=$install_dir
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/src"

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

#=================================================
# SPECIFIC SETUP
#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=2

ynh_add_config --template="../conf/config.yaml" --destination="$install_dir/config.yaml"

chmod 400 "$install_dir/config.yaml"
chown $app:$app "$install_dir/config.yaml"

#=================================================
# INSTALL MAUTRIX-BRIDGE PYTHON MODULE
#=================================================
ynh_script_progression --message="Installing Mautrix-Bridge Python Module..." --weight=6

mkdir -p /var/log/$app
# Configure Mautrix-Bridge
python3 -m venv $install_dir
export HOME=$install_dir
$install_dir/bin/pip3 install --upgrade pip setuptools wheel
$install_dir/bin/pip3 install --upgrade $install_dir/src/mautrix-signal.tar.gz[metrics,e2be,formattednumbers,qrlink,stickers]

#=================================================
# REGISTER HOMESERVER APP-SERVICE
#=================================================
ynh_script_progression --message="Registering $homeserver_instance app-service" --weight=1

$install_dir/bin/python3 -m mautrix_signal -g -c $install_dir/config.yaml -r $app_service_dir/$app.yaml

$homeserver_install_dir/update_synapse_for_appservice.sh || ynh_die --message="$homeserver_instance cannot restart with the app-service configuration"

chown -R $app:$app "$install_dir"
ynh_store_file_checksum --file=$app_service_dir/$app.yaml
ynh_store_file_checksum --file="$install_dir/config.yaml"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=3

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=3

# Use logrotate to manage application logfile(s)
ynh_use_logrotate
chmod -R 600 "/var/log/$app"
chmod 700 "/var/log/$app"
chown -R $app:$app /var/log/$app

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="$app daemon for bridging Signal and Matrix messages ($homeserver_instance)" --log=/var/log/$app/$app.log

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
